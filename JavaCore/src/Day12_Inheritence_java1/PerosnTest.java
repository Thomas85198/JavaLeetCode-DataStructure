package Day12_Inheritence_java1;

/**
 * 
 * 方法的重寫（override/overwrite)
 * 
 * 1. 重寫：子類繼承父類以後，可以對父類中同名同參數的方法，進行覆蓋操作
 * 
 * 2. 應用：重寫以後，當創建子類對象以後，通過子類對象調用子賦類中的同名同參數的方法時。實際執行的是子類重寫父類的方法。
 * 
 * 3. 重寫的規定：
 * 			方法的聲明：權限修飾符 返回值類型 方法名（形參列表）throws 異常的類型 {
 * 						// 方法體
 * 						}
 *  		約定俗稱：子類中的叫重寫的方法，賦類中的叫被重寫的方法
 * 		1) 子類重寫的方法的方法名和形參列表與父類被重寫的方法名與形參列表相同 
 * 		2) 子類重寫的方法權限修飾符不小於父類被重寫的方法的權限修飾符
 * 			> 特殊情況：子類不能重寫與父類中聲明為 private 權線的方法
 * 		3) 返回值類型：
 * 			> 父類被重寫的方法返回值類型是void，則子類重寫的方法的返回值類型只能是void
 * 			> 父類被重寫的方法的返回值是A類型，則子類重寫的方法的返回值類型可以是A類型或Ａ類的子類
 * 			> 父類被重寫的方法的返回值類型是基本數據類型（比如：double），則子類重寫的方法的返回值類型必須是相同的基本數據類型（必須是double）
 * 		4) 子類重寫的方法拋出的異常類型不大於賦類被重寫方法拋出的異常類型（具體放到異常處理時講）
 *  **********************************************************************************************
 *  		子類和父類中的同名同參數的方法要麼都聲明為非static的（考慮重寫），要麼就都static的（不是重寫
 * 
 * 面試題：區分方法的重載與重寫
 * 
 * 
 * 
 * @author thomas
 *
 */
public class PerosnTest {
	public static void main(String[] args) {
			
		Student s = new Student("計算機科學與技術");
		
		s.eat();
		s.walk(10);
		
		s.study();
		
		Person p1 = new Person();
		p1.eat();
		
		
	}
}
